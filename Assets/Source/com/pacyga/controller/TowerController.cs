//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1026
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using com.pacyga.enumeration;

namespace com.pacyga.controller
{
	public class TowerController : GameObjectController
	{
		private const int GOLD_PRICE = 700;
		private const int WOOD_PRICE = 500;

		public float attackCooldown = 1f;
		public float attack;
		public float range;

		private float _attackCount = 0f;

		private GameObject _target;
		
		protected override void Start()
		{
			base.Start();
			_gameManager.canBuyGameObject = false;
			attack = _gameManager.residences * 2;
			range = _gameManager.residences * 2;
			if (_gameManager.gold >= GOLD_PRICE && _gameManager.wood >= WOOD_PRICE)
			{
				_gameManager.canBuyGameObject = true;
				_gameManager.gameObjectGoldPrice = -GOLD_PRICE;
				_gameManager.gameObjectWoodPrice = -WOOD_PRICE;
			}
		}

		protected override void Update()
		{
			if (!activeGameObject)
			{
				return;
			}

			base.Update();
			checkTarget();
			findTarget();
			attackTarget();
		}

		private void checkTarget()
		{
			if (_target != null && _target.GetComponent<TrollController>().health <= 0)
			{
				_target = null;
			}
		}
		
		private void attackTarget()
		{
			if (_target != null)
			{
				_attackCount += Time.deltaTime;
				float distance = Vector3.Distance(transform.position, _target.transform.position);
				if (_attackCount >= attackCooldown && range >= distance)
				{
					_attackCount = 0;
					_objectManager.instantiateBullet(new Vector3(transform.position.x, collider.bounds.size.y, transform.position.z), _target);
				}
			}
		}

		private void findTarget()
		{
			if (_target == null)
			{
				GameObject[] possibleTargets = GameObject.FindGameObjectsWithTag(TagsEnum.ENEMY);
				for (int i = 0; i < possibleTargets.Length; ++i)
				{
					float distance = Vector3.Distance(possibleTargets[i].transform.position, transform.position);
					if (distance < range)
					{
						_target = possibleTargets[i];
						break;
					}
				}
			}
		}

	}
}

