//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1026
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using com.pacyga.enumeration;

namespace com.pacyga.controller
{
	public class TrollController : MonoBehaviour
	{
		public float health = 100f;
		public float speed = 5f;
		public float attackCooldown = 1f;
		public float attack = 10f;

		private bool isCollidingWithPlayerGameObject = false;

		private GameObject _target;

		private float _attackCount = 0f;

		void Start()
		{
			health = Time.time;
			attack = (float)(Time.time * .15f);
			speed = (float)(Time.time * .1f);
		}

		void Update()
		{
			if (health < 0)
			{
				Destroy(gameObject);
				return;
			}

			findTarget();
			moveToTarget();
			rotateToTarget();
			attackTarget();
		}

		void OnCollisionEnter(Collision collision) 
		{
			if (!isCollidingWithPlayerGameObject)
			{
				foreach (ContactPoint contact in collision.contacts) 
				{
					if (contact.otherCollider.gameObject.tag == TagsEnum.PLAYER_GAME_OBJECT)
					{
						_target = contact.otherCollider.gameObject;
						isCollidingWithPlayerGameObject = true;
					}
				}
			}
		}
		
		private void moveToTarget()
		{
			if (_target == null || isCollidingWithPlayerGameObject)
			{
				return;
			}
			animation.Play("Run");
			gameObject.transform.position = Vector3.MoveTowards(transform.position, _target.transform.position, speed * Time.deltaTime);
		}

		private void rotateToTarget()
		{
			if (_target == null)
			{
				return;
			}

			Vector3 direction = (_target.transform.position - transform.position).normalized;
			gameObject.transform.rotation = Quaternion.LookRotation(direction);
		}

		private void attackTarget()
		{
			if (_target != null && isCollidingWithPlayerGameObject)
			{
				_attackCount += Time.deltaTime;
				animation.Play("Attack_01");  //Playing the animation while in the "attack state"
				if (_attackCount >= attackCooldown)
				{
					_target.GetComponent<GameObjectController>().health -= attack;
					_attackCount = 0;
					if (_target.GetComponent<GameObjectController>().health <= 0)
					{
						_target.GetComponent<GameObjectController>().onDestroy ();
						animation.Play("Idle_01");
						isCollidingWithPlayerGameObject = false;
						_target = null;
					}
				}
			}
		}

		private void findTarget()
		{
			if (_target == null)
			{
				GameObject[] possibleTargets = GameObject.FindGameObjectsWithTag(TagsEnum.PLAYER_GAME_OBJECT);
				float bestDistance = float.MaxValue;
				for (int i = 0; i < possibleTargets.Length; ++i)
				{
					float distance = Vector3.Distance(possibleTargets[i].transform.position, transform.position);
					GameObjectController goc = possibleTargets[i].GetComponent<GameObjectController>();

					if (goc == null)
					{
						continue;
					}

					bool isActive = goc.activeGameObject;
					if (distance < bestDistance && isActive)
					{
						_target = possibleTargets[i];
					}
				}
			}
		}

	}
}

